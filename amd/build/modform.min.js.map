{"version":3,"file":"modform.min.js","sources":["../src/modform.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * The main mod_hybridteaching configuration form js.\n *\n * @copyright   2023 isyc <isyc@example.com>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\nimport Templates from \"core/templates\";\n\n/**\n * Get all selectors in one place.\n *\n */\nconst ELEMENT_SELECTOR = {\n    instanceTypeProfiles: () => document.querySelector('[data-profile-types]'),\n    participantData: () => document.querySelector('[data-participant-data]'),\n    participantList: () => document.getElementsByName('participants')[0],\n    participantTable: () => document.getElementById('participant_list_table'),\n    participantSelectionType: () => document.getElementsByName('hybridteaching_participant_selection_type')[0],\n    participantSelection: () => document.getElementsByName('hybridteaching_participant_selection')[0],\n    participantAddButton: () => document.getElementsByName('hybridteaching_participant_selection_add')[0],\n};\n\n/**\n * Initialise the moodle form code.\n *\n * This will help hide or show items depending on the selection of the instance type.\n *\n * @method init\n */\nexport const init = () => {\n\n    ELEMENT_SELECTOR.participantSelectionType().addEventListener('change', (e) => {\n        const currentTypeSelect = e.target;\n        updateSelectionFromType(currentTypeSelect);\n    });\n\n    ELEMENT_SELECTOR.participantAddButton().addEventListener('click', (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        participantAddFromCurrentSelection();\n    });\n\n    participantListInit();\n};\n\n/**\n * Show or hide form element depending on the selected profile\n *\n * @param {string} profileType\n * @param {function} isFeatureEnabled\n */\n      // eslint-disable-next-line no-unused-vars\nconst applyInstanceTypeProfile = (profileType, isFeatureEnabled) => {\n    let showAll = isFeatureEnabled(profileType, 'all');\n    const showFieldset = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#' + id);\n        if (!node) {\n            return;\n        }\n        if (show) {\n            node.style.display = 'block';\n            return;\n        }\n        node.style.display = 'none';\n    };\n    const showInput = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#' + id);\n        if (!node) {\n            return;\n        }\n        var ancestor = node.closest('div').closest('div');\n        if (show) {\n            ancestor.style.display = 'block';\n            return;\n        }\n        ancestor.style.display = 'none';\n    };\n    const showFormGroup = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#fgroup_id_' + id);\n        if (!node) {\n            return;\n        }\n        if (show) {\n            node.classList.remove('hidden');\n            return;\n        }\n        node.classList.add('hidden');\n    };\n    // Show room settings validation.\n    showFieldset('id_room', showAll ||\n        isFeatureEnabled(profileType, 'showroom'));\n    showInput('id_record', showAll ||\n        isFeatureEnabled(profileType, 'showroom'));\n    // Show recordings settings validation.\n    showFieldset('id_recordings', showAll ||\n        isFeatureEnabled(profileType, 'showrecordings'));\n    // Show recordings imported settings validation.\n    showInput('id_recordings_imported', showAll ||\n        isFeatureEnabled(profileType, 'showrecordings'));\n    // Show lock settings validation.\n    showFieldset('id_lock', showAll ||\n        isFeatureEnabled(profileType, 'lock'));\n    // Show guest settings validation.\n    showFieldset('id_guestaccess', showAll ||\n        isFeatureEnabled(profileType, 'showroom'));\n    // Preuploadpresentation feature validation.\n    showFieldset('id_preuploadpresentation', showAll ||\n        isFeatureEnabled(profileType, 'preuploadpresentation'));\n    // Participants feature validation.\n    showFieldset('id_permissions', showAll ||\n        isFeatureEnabled(profileType, 'permissions'));\n    // Schedule feature validation.\n    showFieldset('id_schedule', showAll ||\n        isFeatureEnabled(profileType, 'schedule'));\n    // Common module settings validation.\n    showFieldset('id_modstandardelshdr', showAll ||\n        isFeatureEnabled(profileType, 'modstandardelshdr'));\n    // Restrict access validation.\n    showFieldset('id_availabilityconditionsheader', showAll ||\n        isFeatureEnabled(profileType, 'availabilityconditionsheader'));\n    // Tags validation.\n    showFieldset('id_tagshdr', showAll || isFeatureEnabled(profileType, 'tagshdr'));\n    // Competencies validation.\n    showFieldset('id_competenciessection', showAll ||\n        isFeatureEnabled(profileType, 'competenciessection'));\n    // Completion validation.\n    showFormGroup('completionattendancegroup', showAll ||\n        isFeatureEnabled(profileType, 'completionattendance'));\n    // Completion validation.\n    showFormGroup('completionengagementgroup', showAll ||\n        isFeatureEnabled(profileType, 'completionengagement'));\n};\n\n/**\n * Init the participant list\n */\nconst participantListInit = () => {\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    const participantList = getParticipantList();\n    participantList.forEach(participant => {\n        const selectionTypeValue = participant.selectiontype;\n        const selectionValue = participant.selectionid;\n        const selectionRole = participant.role;\n        if (participant.selectiontype === 'all' ||\n            typeof participantData[participant.selectiontype].children[participant.selectionid] !== 'undefined') {\n            // Add it to the form, but don't add the delete button if it is the first item.\n            participantAddToForm(selectionTypeValue, selectionValue, selectionRole, true).then();\n        }\n    });\n};\n\n/**\n * Add rows to the participant list depending on the current selection.\n *\n * @param {string} selectionTypeValue\n * @param {string} selectionValue\n * @param {string} selectedRole\n * @param {boolean} canRemove\n * @returns {Promise<void>}\n */\nconst participantAddToForm = async(selectionTypeValue, selectionValue, selectedRole, canRemove) => {\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    const sviewer = await getString('mod_form_field_participant_role_viewer', 'mod_hybridteaching');\n    const smoderator = await getString('mod_form_field_participant_role_moderator', 'mod_hybridteaching');\n    let roles = {\n        viewer: {'id': 'viewer', label: sviewer},\n        moderator: {'id': 'moderator', label: smoderator}\n    };\n    roles[selectedRole].isselected = true;\n    try {\n        const listTable = document.querySelector('#participant_list_table tbody');\n        const templateContext = {\n            'selectiontypevalue': selectionTypeValue,\n            'selectionvalue': selectionValue,\n            'participanttype': participantData[selectionTypeValue].name,\n            'participantvalue':\n                (selectionTypeValue !== 'all') ?\n                    participantData[selectionTypeValue].children[selectionValue].name : null,\n            'roles': Object.values(roles),\n            'canRemove': canRemove\n        };\n        const {html, js} = await Templates.renderForPromise('mod_hybridteaching/participant_form_add', templateContext);\n        const newNode = Templates.appendNodeContents(listTable, html, js)[0];\n        newNode.querySelector('.participant-select').addEventListener('change', () => {\n            participantListRoleUpdate(selectionTypeValue, selectionValue);\n        });\n        // Now add the callbacks: participantListRoleUpdate() and participantRemove().\n        const removeNode = newNode.querySelector('.remove-button');\n        if (removeNode) {\n            removeNode\n                .addEventListener('click', () => {\n                    participantRemove(selectionTypeValue, selectionValue);\n                });\n        }\n\n    } catch (e) {\n        Notification.exception(e);\n    }\n};\n/*\n\n */\n\n/**\n * Update the related form element with the list value.\n *\n * @param {object} list\n */\nconst participantListUpdate = (list) => {\n    const participantList = ELEMENT_SELECTOR.participantList();\n    participantList.value = JSON.stringify(list);\n};\n\n/**\n *\n * @returns {any}\n */\nconst getParticipantList = () => {\n    const participantListValue = ELEMENT_SELECTOR.participantList().value;\n    if (participantListValue) {\n        return JSON.parse(participantListValue);\n    }\n    return [];\n};\n\n/**\n * Remove participant both in the table/form and in the form element.\n *\n * @param {string} selectionTypeValue\n * @param {string} selectionValue\n */\nconst participantRemove = (selectionTypeValue, selectionValue) => {\n    const pList = getParticipantList();\n    const id = 'participant_list_tr_' + selectionTypeValue + '-' + selectionValue;\n    const participantListTable = ELEMENT_SELECTOR.participantTable();\n    const selectionid = (selectionValue === '' ? null : selectionValue);\n    for (let i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === selectionTypeValue &&\n            pList[i].selectionid === selectionid) {\n            pList.splice(i, 1);\n        }\n    }\n    // Remove from the form.\n    for (let i = 0; i < participantListTable.rows.length; i++) {\n        if (participantListTable.rows[i].id === id) {\n            participantListTable.deleteRow(i);\n        }\n    }\n    // Update value in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Role update\n *\n * @param {string} type\n * @param {string} id\n */\nconst participantListRoleUpdate = (type, id) => {\n    // Update in memory.\n    const participantListRoleSelection = document.querySelector(`#participant_list_tr_${type}-${id} .participant-select`);\n    const pList = getParticipantList();\n\n    for (var i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === type && pList[i].selectionid === id) {\n            pList[i].role = participantListRoleSelection.value;\n        }\n    }\n    // Update in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Add participant from the currently selected options\n */\nconst participantAddFromCurrentSelection = () => {\n    let selectionType = ELEMENT_SELECTOR.participantSelectionType();\n    let selection = ELEMENT_SELECTOR.participantSelection();\n    const pList = getParticipantList();\n    // Lookup to see if it has been added already.\n    for (var i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === selectionType.value &&\n            pList[i].selectionid === selection.value) {\n            return;\n        }\n    }\n    pList.push({\n        \"selectiontype\": selectionType.value,\n        \"selectionid\": selection.value,\n        \"role\": \"viewer\"\n    });\n    // Add it to the form.\n    participantAddToForm(selectionType.value, selection.value, 'viewer', true).then();\n    // Update in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Update selectable options when changing types\n *\n * @param {HTMLNode} currentTypeSelect\n */\nconst updateSelectionFromType = (currentTypeSelect) => {\n    const createNewOption = (selectItem, label, value) => {\n        const option = document.createElement('option');\n        option.text = label;\n        option.value = value;\n\n        selectItem.add(option);\n    };\n\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    // Clear all selection items.\n    const participantSelect = ELEMENT_SELECTOR.participantSelection();\n    while (participantSelect.firstChild) {\n        participantSelect.removeChild(participantSelect.firstChild);\n    }\n    // Add options depending on the selection.\n    if (currentTypeSelect.selectedIndex !== -1) {\n\n        if (participantData[currentTypeSelect.value] !== null && participantData[currentTypeSelect.value] !== undefined) {\n            const options = Object.values(participantData[currentTypeSelect.value].children);\n            options.forEach(option => {\n                createNewOption(participantSelect, option.name, option.id);\n            });\n\n            if (currentTypeSelect.value === 'all' || currentTypeSelect.value === '') {\n                createNewOption(participantSelect, '---------------', 'all');\n                participantSelect.disabled = true;\n            } else {\n                participantSelect.disabled = false;\n            }\n            ELEMENT_SELECTOR.participantAddButton().setAttribute('style', 'display:inline-block');\n        } else if (currentTypeSelect.value === '') {\n            ELEMENT_SELECTOR.participantAddButton().setAttribute('style', 'display:none');\n        }\n    }\n};\n"],"names":["ELEMENT_SELECTOR","document","querySelector","getElementsByName","getElementById","addEventListener","e","currentTypeSelect","target","updateSelectionFromType","stopPropagation","preventDefault","participantAddFromCurrentSelection","participantListInit","participantData","JSON","parse","dataset","getParticipantList","forEach","participant","selectionTypeValue","selectiontype","selectionValue","selectionid","selectionRole","role","children","participantAddToForm","then","async","selectedRole","canRemove","roles","viewer","label","moderator","isselected","listTable","templateContext","name","Object","values","html","js","Templates","renderForPromise","newNode","appendNodeContents","participantListRoleUpdate","removeNode","participantRemove","exception","participantListUpdate","list","value","stringify","participantListValue","pList","id","participantListTable","i","length","splice","rows","deleteRow","type","participantListRoleSelection","selectionType","selection","push","createNewOption","selectItem","option","createElement","text","add","participantSelect","firstChild","removeChild","selectedIndex","undefined","disabled","setAttribute"],"mappings":"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"}